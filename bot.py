import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.types import BotCommand, BotCommandScopeChat
from aiohttp import web
from dotenv import load_dotenv
from wb_parser import fetch_price
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from gsheets import add_article, get_articles_text, remove_article


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
MODE         = os.getenv("MODE", "local")
BOT_TOKEN    = os.getenv("BOT_TOKEN")
DOMAIN       = os.getenv("DOMAIN", "")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/")
PORT         = int(os.getenv("PORT", "8080"))
TZ           = os.getenv("TZ", "Europe/Moscow")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="[%(asctime)s] %(levelname)s: %(message)s")
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def setup_scheduler():
    scheduler = AsyncIOScheduler(timezone=TZ)
    scheduler.add_job(fetch_price, "cron", hour=10, minute=0)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    scheduler.start()
    logging.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Polling (–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def polling_main():
    await bot.delete_webhook(drop_pending_updates=True)
    await setup_scheduler()
    logging.info("üëÇ Polling –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Webhook (–ø—Ä–æ–¥) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def on_startup(app: web.Application):
    webhook_url = DOMAIN.rstrip("/") + WEBHOOK_PATH
    await bot.set_webhook(webhook_url, drop_pending_updates=True)
    await setup_scheduler()
    logging.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

def webhook_app() -> web.Application:
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.on_startup.append(on_startup)
    return app

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•–µ–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(F.text.startswith("/add "))
async def cmd_add(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∞—Ä—Ç–∏–∫—É–ª>")
        return

    articul = parts[1]
    if add_article(articul):
        await msg.answer(f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª {articul} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")
    else:
        await msg.answer(f"‚ÑπÔ∏è –ê—Ä—Ç–∏–∫—É–ª {articul} —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ.")

@dp.message(F.text == "/list")
async def cmd_list(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    text = get_articles_text()
    await msg.answer(text)

@dp.message(F.text.startswith("/del "))
async def cmd_del(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del <–∞—Ä—Ç–∏–∫—É–ª>")
        return

    articul = parts[1]
    if remove_article(articul):
        await msg.answer(f"üóë –ê—Ä—Ç–∏–∫—É–ª {articul} —É–¥–∞–ª—ë–Ω.")
    else:
        await msg.answer(f"‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª {articul} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(F.text == "/help")
async def cmd_help(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")
        return

    help_text = """
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/add &lt;–∞—Ä—Ç–∏–∫—É–ª&gt; ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/del &lt;–∞—Ä—Ç–∏–∫—É–ª&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/check ‚Äî —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
"""
    await msg.answer(help_text.strip(), parse_mode="HTML")

@dp.message(F.text == "/check")
async def cmd_check(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await msg.answer("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, –∂–¥–∏—Ç–µ...")
    try:
        await fetch_price()
        await msg.answer("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message):
    is_admin = msg.from_user.id in ADMIN_IDS

    if is_admin:
        await bot.set_my_commands(
            commands=[
                BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª"),
                BotCommand(command="del", description="–£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª"),
                BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"),
                BotCommand(command="check", description="–†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥"),
                BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
            ],
            scope=BotCommandScopeChat(chat_id=msg.chat.id)
        )
        await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!\n–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    else:
        await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    if MODE == "prod":
        logging.info("üöÄ PROD —Ä–µ–∂–∏–º (Webhook)")
        web.run_app(webhook_app(), host="0.0.0.0", port=PORT)
    else:
        logging.info("üß™ LOCAL —Ä–µ–∂–∏–º (Polling)")
        asyncio.run(polling_main())

if __name__ == "__main__":
    main()
